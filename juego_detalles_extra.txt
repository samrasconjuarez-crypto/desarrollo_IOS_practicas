
// Aquí definimos todos los posibles "roles" o estados que un jugador puede tener durante el juego.
enum RolesJuegoEscondidas {
    case contando               
    case buscando_jugadores  
    case buscando_escondite   
    case escondido            
    case regresando_a_base    
    case encontrado            
    case cantar_victoria        // NUEVO: Estado para cuando un jugador gana
    case exterminado            // CAMBIO: Antes era "suspendido", ahora indica que ya no juega
}


// Aquí definimos lo que cualquier jugador debe tener y poder hacer.
// Un "protocol" es como un contrato: quien lo use, debe cumplir estas reglas.

protocol JugadorDeEscondidas: AnyObject {
    var rol: RolesJuegoEscondidas { get set }          // Rol actual del jugador
    var compañeros_de_juego: [JugadorDeEscondidas] { get set }  // Lista de compañeros
    var nombre: String { get set }                     // Nombre del jugador
    var lugar_actual: UbicacionFisica? { get set }    // Ubicación actual en el juego
    var visibilidad: Double { get set }               // Probabilidad de ser visto por otro jugador
    
    func actualizar() -> Bool                          // Función para actualizar estado en cada ciclo
    func establecer_rol(_ rol_nuevo: RolesJuegoEscondidas) -> Bool // Cambiar el rol del jugador
    func agregar_compañero(_ compañero_nuevo: JugadorDeEscondidas) -> Bool // Agregar compañero
}


// ================================
// Aquí definimos una forma estándar de cambiar el rol de un jugador.
// No todos los roles pueden cambiar a cualquier otro, por eso hay reglas.
extension JugadorDeEscondidas {
    func establecer_rol(_ rol_nuevo: RolesJuegoEscondidas) -> Bool {
        switch(self.rol){
            case .exterminado: 
                // Si el jugador estaba exterminado, podemos cambiar su rol
                self.rol = rol_nuevo
                return true
            
            case .cantar_victoria, .encontrado: 
                // Solo se puede cambiar a "exterminado" desde estos roles
                if rol_nuevo == .exterminado {
                    self.rol = rol_nuevo
                    return true
                }
                return false
                
            default: 
                // Los demás roles no pueden cambiarse directamente con esta función
                return false
        }
    }
}

// ================================
// Estructura para coordenadas
// ================================
struct Ubicacion2Dimensiones {
    var x: Int
    var y: Int 
    
    init(_ x: Int, _ y: Int){
        self.x = x
        self.y = y
    }
}

// ================================
// Clase UbicacionFisica
// ================================
// Representa un lugar físico en el juego donde los jugadores pueden estar
class UbicacionFisica {
    var nombre: String
    var lugares_cercanos: [UbicacionFisica]  // Lugares a los que se puede mover
    
    init(_ nombre: String){
        self.nombre = nombre
        self.lugares_cercanos = []
    }
    
    func agregar_lugar(_ lugar: UbicacionFisica) -> Bool {
        // Evita duplicados
        for ubicacion in lugares_cercanos {
            if ubicacion.nombre == lugar.nombre {
                return false
            }
        }
        
        // Conecta ambos lugares (ida y vuelta)
        lugar.lugares_cercanos.append(self)
        self.lugares_cercanos.append(lugar)
        
        return true
    }
}



// Representa un personaje básico, sin lógica de juego
class Personaje {
    var nombre: String
    var ubicacion: UbicacionFisica?
    
    init(_ nombre: String){
        self.nombre = nombre
        self.ubicacion = nil
    }
    
    func establecer_ubicacion(_ nueva_ubicacion: UbicacionFisica) -> Bool {
        // Si no tenía ubicación, la asigna
        if ubicacion == nil {
            self.ubicacion = nueva_ubicacion
            return true
        }
        
        // Si ya estaba en ese lugar, no hace nada
        if ubicacion!.nombre == nueva_ubicacion.nombre {
            return false
        }
        
        // Cambia de lugar
        ubicacion = nueva_ubicacion
        return true
    }
}


// Es un personaje que participa en el juego y cumple el protocolo JugadorDeEscondidas
class PersonajeJugable: Personaje, JugadorDeEscondidas {
    var visibilidad: Double
    var rol: RolesJuegoEscondidas = .exterminado
    var lugar_actual: UbicacionFisica?
    var numero_contado: Int
    var compañeros_de_juego: [JugadorDeEscondidas] = []
    
    init(_ nombre: String, visibilidad: Double){
        self.visibilidad = visibilidad
        numero_contado = 0
        super.init(nombre)
        lugar_actual = nil
    }
    
    func actualizar() -> Bool {
        // Dependiendo del rol del jugador, hace cosas diferentes
        switch(rol){
            case .contando:
                self.contar_para_buscar()          // Cuenta para buscar
            
            case .buscando_jugadores:
                self.identificar_jugadores()       // Revisa si hay jugadores en el mismo lugar
                self.moverse_de_lugar()            // Se mueve a otro lugar
            
            case .buscando_escondite:
                self.moverse_de_lugar()            // Se mueve buscando escondite
                let quedarse_quieto = Int.random(in: 0...10)
                if quedarse_quieto % 5 == 0 {
                    self.rol = .escondido          // Decide quedarse quieto de vez en cuando
                }
                
            case .cantar_victoria, .exterminado:
                print("TODO")                       // Por ahora no hace nada
            
            default:
                print("todo")                       // Otros roles aún sin lógica
        }
        return false
    }
    
    func identificar_jugadores() {
        // Revisa si hay jugadores en la misma ubicación
        for compañero in compañeros_de_juego {
            if compañero.lugar_actual!.nombre == self.lugar_actual!.nombre {
                let probabilidad_de_omitir = Int(compañero.visibilidad * 100)
                let suerte = Int.random(in: 0...100)
                if suerte > probabilidad_de_omitir {
                    compañero.rol = .exterminado   // Lo "extermina" si tiene mala suerte
                }
            }
        }
    }
    
    func moverse_de_lugar() {
        // Se mueve a un lugar cercano al azar
        let indice_de_nuevo_lugar = Int.random(in: 0..<lugar_actual!.lugares_cercanos.count)
        let nuevo_lugar = lugar_actual!.lugares_cercanos[indice_de_nuevo_lugar]
        let deberia_de_cambiar = Int.random(in: 0...10)
        
        if deberia_de_cambiar % 2 == 0 {
            cambiar_de_lugar_a(nuevo_lugar)
        }
    }
    
    func contar_para_buscar() {
        numero_contado += 1
        print("Soy \(nombre) y voy en el \(numero_contado)")
        
        if numero_contado > 10 {
            self.rol = .buscando_jugadores    // Después de contar, empieza a buscar
        }
    }
    
    func cambiar_de_lugar_a(_ ubicacion: UbicacionFisica) -> Bool {
        if self.lugar_actual == nil {
            self.lugar_actual = ubicacion
            return true 
        }
        
        if ubicacion.nombre == self.lugar_actual!.nombre {
            return false
        }
        
        lugar_actual = ubicacion
        return true
    }
    
    func agregar_compañero(_ compañero_nuevo: JugadorDeEscondidas) -> Bool {
        if compañero_nuevo.nombre == self.nombre {
            return false
        }
        
        for compañero in compañeros_de_juego {
            if compañero.nombre == compañero_nuevo.nombre {
                return false
            }
        }
        
        compañeros_de_juego.append(compañero_nuevo)
        return true
    }
}

// ================================
// Función para iniciar el juego
// ================================
func iniciar_juego(jugadores: [JugadorDeEscondidas]) {
    let numero_del_jugador_que_busca = Int.random(in: 0..<jugadores.count)
    var jugador_que_busca: JugadorDeEscondidas = jugadores[numero_del_jugador_que_busca]
    
    jugador_que_busca.establecer_rol(.contando)   // Empieza a contar
    
    for jugador in jugadores {
        jugador_que_busca.agregar_compañero(jugador)
        
        if jugador.rol == .exterminado {
            jugador.establecer_rol(.buscando_escondite)   // Todos los demás empiezan a esconderse
        }
    }
}

// ================================
// Definición de jugadores y ubicaciones
// ================================
let punto_de_inicio = Ubicacion2Dimensiones(1, 3)

var jugadores: [PersonajeJugable] = []
jugadores.append(PersonajeJugable("Dahli", visibilidad: 0.5))
jugadores.append(PersonajeJugable("Hoso Terra Toma", visibilidad: 0.1))
jugadores.append(PersonajeJugable("Saint", visibilidad: 0.2))
jugadores.append(PersonajeJugable("Sigourney Beaver", visibilidad: 0.9))
jugadores.append(PersonajeJugable("La Zavaleta", visibilidad: 0.3))
jugadores.append(PersonajeJugable("Formelda Hyde", visibilidad: 0.6))
jugadores.append(PersonajeJugable("Bitter Betty", visibilidad: 0.7))

let loby = UbicacionFisica("Loby")
let oficina = UbicacionFisica("Oficina")
let sala_de_estar = UbicacionFisica("Sala de estar")
let salon = UbicacionFisica("Salon")
let baños = UbicacionFisica("Baños")
let floorShow = UbicacionFisica("Floor Show")
let cuartoDeTrabajo = UbicacionFisica("Cuarto de trabajo")
let dormitorios = UbicacionFisica("Dormitorios")

// Conexiones
loby.agregar_lugar(sala_de_estar)
loby.agregar_lugar(salon)
loby.agregar_lugar(oficina)
sala_de_estar.agregar_lugar(baños)
salon.agregar_lugar(baños)
salon.agregar_lugar(floorShow)
oficina.agregar_lugar(cuartoDeTrabajo)
cuartoDeTrabajo.agregar_lugar(dormitorios)
dormitorios.agregar_lugar(floorShow)

var ubicaciones_juego: [UbicacionFisica] = [loby]

iniciar_juego(jugadores: jugadores)

for jugador in jugadores {
    jugador.cambiar_de_lugar_a(loby)
}

// ================================
// Bucle principal del juego
// ================================
var ciclo_actual = 0
while true {
    for jugador in jugadores {
        jugador.actualizar()   // Cada jugador hace su turno
    }
    
    for jugador in jugadores {
        // Imprime información de cada jugador
        print("El rol de \(jugador.nombre) es \(jugador.rol)")
        print("Estoy en: \(jugador.lugar_actual?.nombre ?? "Toy agarrando Señal krnal")")
        print("Mis compañeros son: \(jugador.compañeros_de_juego.count)")
    }
    print("")
   
   ciclo_actual += 1 
   if ciclo_actual > 25 {   // Limita el juego a 25 ciclos
       break
   }
}
